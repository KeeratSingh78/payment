import 'package:flutter_tts/flutter_tts.dart';
import 'package:speech_to_text/speech_to_text.dart' as stt;
import 'dart:async';

class VoiceService {
  static final stt.SpeechToText _speechToText = stt.SpeechToText();
  static final FlutterTts _flutterTts = FlutterTts();

  static bool _isInitialized = false;
  static bool _isListening = false;

  // Callbacks
  static Function(String result)? onResult;
  static Function(String error)? onError;

  /// Initialize both STT and TTS
  static Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      final available = await _speechToText.initialize(
        onStatus: (status) => print("ЁЯОд Status: $status"),
        onError: (error) {
          print("тЭМ STT error: $error");
          onError?.call(error.errorMsg);
        },
      );

      await _flutterTts.awaitSpeakCompletion(true);

      if (available) {
        _isInitialized = true;
        print("тЬЕ VoiceService initialized");
      } else {
        print("тЪая╕П Speech recognition not available");
      }
    } catch (e) {
      print("тЭМ Initialization failed: $e");
      onError?.call(e.toString());
    }
  }

  /// Speak text aloud
  static Future<void> speak(String text, {String language = 'en-US'}) async {
    await _flutterTts.setLanguage(language);
    await _flutterTts.setPitch(1.0);
    await _flutterTts.setSpeechRate(0.9);
    await _flutterTts.speak(text);
  }

  /// Start listening (with fallback)
  static Future<void> startListening({
    String? localeId,
    Duration listenFor = const Duration(seconds: 15),
    Duration pauseFor = const Duration(seconds: 5),
  }) async {
    if (!_isInitialized) await initialize();
    if (!_isInitialized) return;

    if (_isListening) {
      await stopListening();
    }

    Future<void> _tryListen(bool onDevice) async {
      print("ЁЯОд Trying listen (onDevice=$onDevice) ...");
      final started = await _speechToText.listen(
        onResult: (result) {
          if (result.recognizedWords.isNotEmpty) {
            print("тЬЕ Recognized: ${result.recognizedWords}");
            onResult?.call(result.recognizedWords);
          } else {
            print("тЪая╕П Empty recognition");
          }
        },
        localeId: localeId,
        listenFor: listenFor,
        pauseFor: pauseFor,
        partialResults: true,
        listenMode: stt.ListenMode.dictation,
        onDevice: onDevice,
      );

      if (started) {
        _isListening = true;
        print("ЁЯОд Listening started (onDevice=$onDevice)");
      } else {
        print("тЭМ listen() failed (onDevice=$onDevice)");
      }
    }

    // Try device first
    await _tryListen(true);

    // Retry with cloud if nothing recognized
    Future.delayed(const Duration(seconds: 3), () async {
      if (_isListening && _speechToText.lastRecognizedWords.isEmpty) {
        print("тЪая╕П Retrying with cloud recognition...");
        await stopListening();
        await _tryListen(false);
      }
    });
  }

  /// Stop listening
  static Future<void> stopListening() async {
    if (_isListening) {
      await _speechToText.stop();
      _isListening = false;
      print("ЁЯЫС Stopped listening");
    }
  }

  /// Cancel listening
  static Future<void> cancelListening() async {
    if (_isListening) {
      await _speechToText.cancel();
      _isListening = false;
      print("ЁЯЫС Cancelled listening");
    }
  }

  /// Helper: return Hindi responses
  static String getHindiResponse(String intent, {String? additionalInfo}) {
    switch (intent) {
      case 'check_balance':
        return "рдЖрдкрдХрд╛ рдмреИрд▓реЗрдВрд╕ ${additionalInfo ?? ''} рд░реБрдкрдпреЗ рд╣реИ";
      case 'send_money':
        return "рдкреИрд╕реЗ рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рднреЗрдЬрдиреЗ рд╡рд╛рд▓реЗ рд╡реНрдпрдХреНрддрд┐ рдХрд╛ рдЪрдпрди рдХрд░рдирд╛ рд╣реЛрдЧрд╛ред";
      case 'receive_money':
        return "рдкреИрд╕реЗ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХрд╛ QR рдХреЛрдб рджрд┐рдЦрд╛рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИред";
      case 'view_history':
        return "рдЖрдкрдХреЗ рд▓реЗрдирджреЗрди рдХрд╛ рдЗрддрд┐рд╣рд╛рд╕ рджрд┐рдЦрд╛рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИред";
      case 'help':
        return "рдЖрдк рдХрд╣ рд╕рдХрддреЗ рд╣реИрдВ: рдкреИрд╕реЗ рднреЗрдЬреЛ, рдкреИрд╕реЗ рдкреНрд░рд╛рдкреНрдд рдХрд░реЛ, рдмреИрд▓реЗрдВрд╕ рдЪреЗрдХ рдХрд░реЛ, рдЗрддрд┐рд╣рд╛рд╕ рджрд┐рдЦрд╛рдУ, рдпрд╛ рдорджрдж";
      case 'transaction_success':
        return additionalInfo != null
            ? 'рд▓реЗрдирджреЗрди рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреВрд░рд╛ рд╣реБрдЖред $additionalInfo'
            : 'рд▓реЗрдирджреЗрди рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреВрд░рд╛ рд╣реБрдЖред';
      case 'insufficient_balance':
        return 'рдЖрдкрдХреЗ рдЦрд╛рддреЗ рдореЗрдВ рдкрд░реНрдпрд╛рдкреНрдд рдмреИрд▓реЗрдВрд╕ рдирд╣реАрдВ рд╣реИред';
      default:
        return "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХрд╣реЗрдВ: рдкреИрд╕реЗ рднреЗрдЬреЛ, рдкреИрд╕реЗ рдкреНрд░рд╛рдкреНрдд рдХрд░реЛ, рдмреИрд▓реЗрдВрд╕ рдЪреЗрдХ рдХрд░реЛ, рдпрд╛ рдорджрдж";
    }
  }

  /// Helper: greeting
  static String getGreeting(String language) {
    final hour = DateTime.now().hour;
    if (language == 'hi-IN') {
      if (hour < 12) return "рд╕реБрдкреНрд░рднрд╛рдд! рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?";
      if (hour < 18) return "рдирдорд╕реНрдХрд╛рд░! рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?";
      return "рд╢реБрдн рд╕рдВрдзреНрдпрд╛! рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?";
    } else {
      if (hour < 12) return "Good morning! How can I help you today?";
      if (hour < 18) return "Good afternoon! How can I help you today?";
      return "Good evening! How can I help you today?";
    }
  }

  /// Helper: process commands with enhanced Hindi support
  static Map<String, dynamic> processVoiceCommand(String command) {
    final lowerCommand = command.toLowerCase().trim();
    print('ЁЯФН Processing command: "$lowerCommand"');

    // Stop any ongoing listening to prevent multiple recognitions
    stopListening();

    // Send Money Commands (Hindi & English)
    if (_containsAny(lowerCommand, [
      // Hindi variations
      'рдкреИрд╕реЗ рднреЗрдЬ', 'рдкреИрд╕рд╛ рднреЗрдЬ', 'рднреЗрдЬ', 'рднреЗрдЬреЛ', 'рднреЗрдЬрдирд╛', 'send рдХрд░', 'transfer рдХрд░',
      'рдкреИрд╕реЗ transfer', 'money рднреЗрдЬ', 'rupee рднреЗрдЬ', 'рд░реБрдкрдП рднреЗрдЬ', 'рд░реБрдкрдпреЗ рднреЗрдЬ',
      'paisa bhej', 'paise bhej', 'bhej', 'bhejo', 'bhejana', 'bhejiye',
      // English variations
      'send money', 'send', 'transfer money', 'transfer', 'pay', 'payment'
    ])) {
      print('тЬЕ Detected: send_money');
      return {'action': 'send_money'};
    }

    // Receive Money Commands (Hindi & English)
    if (_containsAny(lowerCommand, [
      // Hindi variations
      'рдкреИрд╕реЗ рд▓реЗ', 'рдкреИрд╕рд╛ рд▓реЗ', 'рдкреНрд░рд╛рдкреНрдд рдХрд░', 'receive рдХрд░', 'qr рджрд┐рдЦрд╛',
      'qr code рджрд┐рдЦрд╛',
      'рдкреИрд╕реЗ receive', 'money рд▓реЗ', 'рдкреИрд╕реЗ рдорд╛рдВрдЧ', 'upi id рджрд┐рдЦрд╛',
      'paisa le', 'paise le', 'prapt kar', 'receive kar', 'qr dikha',
      // English variations
      'receive money', 'receive', 'show qr', 'qr code', 'get money'
    ])) {
      print('тЬЕ Detected: receive_money');
      return {'action': 'receive_money'};
    }

    // Balance Check Commands (Hindi & English)
    if (_containsAny(lowerCommand, [
      // Hindi variations
      'рдмреИрд▓реЗрдВрд╕ рдЪреЗрдХ', 'рдмреИрд▓реЗрдВрд╕ рджреЗрдЦ', 'рдмреИрд▓реЗрдВрд╕ рдмрддрд╛', 'рдХрд┐рддрдирд╛ рдкреИрд╕рд╛', 'рдХрд┐рддрдиреЗ рд░реБрдкрдП',
      'balance рджреЗрдЦ', 'balance рдмрддрд╛', 'balance check', 'kitna paisa',
      'kitne rupee', 'рдмреИрд▓реЗрдВрд╕', 'рдмреИрд▓реЗрдиреНрд╕',
      'balance kitna', 'paisa kitna', 'rupee kitne', 'account balance',
      // English variations - including short forms
      'check balance', 'balance', 'bal', 'show balance', 'my balance',
      'account balance', 'check bal', 'show bal', 'my bal'
    ])) {
      print('тЬЕ Detected: check_balance');
      return {'action': 'check_balance'};
    }

    // History Commands (Hindi & English)
    if (_containsAny(lowerCommand, [
      // Hindi variations
      'рдЗрддрд┐рд╣рд╛рд╕ рджреЗрдЦ', 'history рджреЗрдЦ', 'transaction рджреЗрдЦ', 'рд▓реЗрдирджреЗрди рджреЗрдЦ',
      'рдкреБрд░рд╛рдиреЗ transaction',
      'itihas dekh', 'history dekh', 'transaction dekh', 'lenden dekh',
      'purane transaction', 'transaction history',
      // English variations
      'transaction history', 'history', 'transactions', 'show history',
      'past transactions'
    ])) {
      print('тЬЕ Detected: view_history');
      return {'action': 'view_history'};
    }

    // Help Commands (Hindi & English)
    if (_containsAny(lowerCommand, [
      // Hindi variations
      'рдорджрдж', 'рд╕рд╣рд╛рдпрддрд╛', 'help рдХрд░', 'рдХреНрдпрд╛ рдХрд░ рд╕рдХрддреЗ', 'рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛',
      'madad', 'sahayata', 'help kar', 'kya kar sakte', 'kaise kaam karta',
      // English variations
      'help', 'assistance', 'what can you do', 'commands', 'options'
    ])) {
      print('тЬЕ Detected: help');
      return {'action': 'help'};
    }

    print('тЭУ Unknown command: "$lowerCommand"');
    return {'action': 'unknown', 'original_command': command};
  }

  /// Helper method to check if command contains any of the given phrases
  static bool _containsAny(String command, List<String> phrases) {
    for (String phrase in phrases) {
      if (command.contains(phrase.toLowerCase())) {
        return true;
      }
    }
    return false;
  }

  static bool get isListening => _isListening;
}
